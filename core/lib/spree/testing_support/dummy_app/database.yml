<%=
require 'yaml'

lib = "#{ENV['LIB_NAME']}_solidus"

case ENV['DB'].presence
when /mysql/
  default = {
    adapter: 'mysql2',
    encoding: 'utf8',
    host: (ENV['DB_MYSQL_HOST'] || ENV['DB_HOST']).presence,
    username: ENV['DB_PASSWORD'].presence,
    password: ENV['DB_USERNAME'].presence,
  }.compact

  config = {
    development: default.merge(database: "#{lib}_development"),
    production:  default.merge(database: "#{lib}_production"),
    test:        default.merge(database: "#{lib}_test"),
  }
when /postgres/
  default = {
    adapter: 'postgresql',
    encoding: 'utf8',
    host: ENV['DB_POSTGRES_HOST'] || ENV['DB_HOST'],
    username: ENV['DB_PASSWORD'].presence,
    password: ENV['DB_USERNAME'].presence,
  }.compact

  config = {
    development: default.merge(database: "#{lib}_development"),
    production:  default.merge(database: "#{lib}_production"),
    test:        default.merge(database: "#{lib}_test"),
  }
when /sqlite/, nil
  default = {
    adapter: sqlite3
  }
  config = {
    development: default.merge(database: "db/#{lib}_development.sqlite3"),
    production:  default.merge(database: "db/#{lib}_production.sqlite3"),
    test:        default.merge(database: "db/#{lib}_test.sqlite3"),
  }
else raise "Invalid DB specified: #{ENV['DB'].inspect}"
end

config.deep_stringify_keys.to_yaml
%>
