#!/usr/bin/env ruby
# frozen_string_literal: true

require "octokit"
require "faraday"

module Spree
  module Release
    class Draft
      attr_reader :url, :content

      def initialize(url:, content:)
        @url = url
        @content = content
      end

      def new?
        @url.nil?
      end

      def with(content:)
        self.class.new(content: content, url: @url)
      end
    end

    class Client
      REPOSITORY = 'waiting-for-dev/solidus'

      def initialize(github_token:, tag:, branch:)
        @client = Octokit::Client.new(access_token: github_token).tap { |c| c.auto_paginate }
        @tag = Gem::Version.new(tag.delete_prefix('v')).bump
        @branch = branch
      end

      def fetch_draft(initial_draft:)
        release = @client.releases(REPOSITORY).find do |release|
          release.name == @tag
        end
        release ? Draft.new(url: release.url, content: release.body) : Draft.new(url: nil, content: initial_draft)
      end

      def fetch_pr(pr_number:)
        @client.pull(REPOSITORY, pr_number)
      end

      def create_draft(draft:)
        @client.create_release(
          REPOSITORY,
          @tag,
          name: @tag,
          target_commitish: @branch,
          body: draft.content,
          draft: true
        )
      end

      def update_draft(draft:)
        @client.update_release(
          draft.url,
          name: @tag,
          body: draft.content,
          draft: true,
          tag_name: @tag,
          target_commitish: @branch
        )
      end
    end

    class Template
      CATEGORIES = Set[
        'Solidus Core',
        'Solidus Admin',
        'Solidus API'
      ].freeze

      TITLE_PREFIX = "### "

      TITLE_TEMPLATE = lambda do |category|
        TITLE_PREFIX + category
      end.freeze

      TITLE_SEPARATOR = "\n"

      PR_TEMPLATE = lambda do |pr|
        "- #{pr.title} ##{pr.number} (@#{pr.user.login})"
      end.freeze

      PR_SEPARATOR = "\n"

      SECTION_SEPARATOR = "\n\n"

      def initialize(github_token:, tag:, branch:)
        @client = Client.new(github_token: github_token, tag: tag, branch: branch)
        @draft = @client.fetch_draft(initial_draft: initial_draft)
      end

      def call(pr_number:)
        pr = @client.fetch_pr(pr_number: pr_number)
        labels = pr.labels.map(&:name)
        entry = PR_TEMPLATE.(pr)
        draft = load_draft
        (CATEGORIES & labels).each do |category|
          draft[category] << entry
        end
        new_content = dump_draft(draft)
        if @draft.new?
          @client.create_draft(draft: @draft.with(content: new_content))
        else
          @client.update_draft(draft: @draft.with(content: new_content))
        end
        puts new_content
      end

      private

      def load_draft
        groups = @draft.content.split(/(^#{TITLE_PREFIX}.*$)/)
        groups.each_with_object({}) do |substr, parsed|
          category = CATEGORIES.find do |category|
            TITLE_TEMPLATE.(category) == substr
          end
          next unless category

          parsed[category] = ((groups[groups.index(substr) + 1]) || "").split(PR_SEPARATOR)
        end
      end

      def dump_draft(parsed)
        parsed.map do |(category, prs)|
          "#{TITLE_TEMPLATE.(category)}#{TITLE_SEPARATOR}#{prs.join(PR_SEPARATOR)}"
        end.join(SECTION_SEPARATOR)
      end

      def initial_draft
        CATEGORIES.map do |category|
          TITLE_TEMPLATE.(category)
        end.join(SECTION_SEPARATOR)
      end
    end
  end
end

Spree::Release::Template.new(github_token: ARGV[0], tag: ARGV[1], branch: ARGV[2]).call(pr_number: ARGV[3])
